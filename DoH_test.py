#!/usr/bin/env python3

# Detect possible malware with DoH
# -*- coding: utf-8 -*-

# %%%%%%%%%%% Libraries %%%%%%%%%%%#

import os
import json
import base64
import argparse
import requests
import dns.message as dns

# %%%%%%%%%%% Constants %%%%%%%%%%%#

result_json = os.path.dirname(os.path.abspath(__file__))\
            + os.sep + 'result.json'
SEPARATOR = "[*] {0} [*]".format('-' * 110)

dnssec = {
    'elevenpaths': {
        'url': 'https://doh-beta.e-paths.com/dns-query',
        'malware_ip': ['18.194.105.161']},
    'google': {
        'url': 'https://dns.google/dns-query',
        'malware_ip': ['184.168.221.53']},
    'cloudflare': {
        'url': 'https://security.cloudflare-dns.com/dns-query',
        'malware_ip': ['184.168.221.61']},
    'nextdns': {
        'url': 'https://dns.nextdns.io/8394f8',
        'malware_ip': ['50.63.202.41']},
    'controld': {
        'url': 'https://freedns.controld.com/p1',
        'malware_ip': ['50.63.202.41']}
    }

# %%%%%%%%%%% Functions %%%%%%%%%%%#


def arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument("domain",
                        type=str,
                        help='specify domain to process')
    args = parser.parse_args()
    if args.domain is None:
        print(parser.print_usage)
        exit(0)
    else:
        return args.domain


def doh_query(domain, dnsname, detected):
    message = dns.make_query(domain, 1)
    dns_req = base64.urlsafe_b64encode(message.to_wire()).\
        decode("UTF8").rstrip("=")

    try:
        resp = requests.get(
            dnssec[dnsname]['url'], params={"dns": dns_req},
            headers={"Content-type": "application/dns-message"})
    except requests.RequestException as reqerror:
        detected[dnsname] = dict(report_DoH='Error with DNSSec Service',
                                 domain=domain)
        return detected

    if "application/dns-message" not in resp.headers["Content-Type"]:
        detected[dnsname] = dict(report_DoH='DNS is not response',
                                 domain=domain, A='')
        return detected

    answers = [response.to_text().split("\n") for response in dns.from_wire(
        resp.content).answer]
    ips = [answer.split()[4] for answer in answers[0]]

    if not ips:
        detected[dnsname] = dict(report_DoH='Domain does not exist',
                                 domain=domain, A='')
    elif dnssec[dnsname]['malware_ip'] in ips:
        detected[dnsname] = dict(report_DoH='Malware', domain=domain, A='')
    else:
        detected[dnsname] = dict(report_DoH='Good', domain=domain, A=ips)

    return detected


def screen_print(detected, domain):
    print(SEPARATOR)
    print('[*] We analized the DoH response of {}'.format(domain))
    print(SEPARATOR)
    print('')
    print('[*]\t{:<10}\t\t{:<50}'.format('DNS Server', 'Classification'))
    for dnsserver in list(detected.keys()):
        print('[*]\t{:<10}\t\t{:<50}'.format(
            dnsserver, detected[dnsserver]['report_DoH']))
    print(SEPARATOR)


def file_result(detected):
    detected_json = json.dumps(detected, ensure_ascii=False)
    with open(result_json, 'w') as file:
        file.write(detected_json)

# %%%%%%%%%%% Main %%%%%%%%%%%#


def main():
    domain = arguments()
    detected = {}
    for doh_server in list(dnssec.keys()):
        detected.update(doh_query(domain, doh_server, detected))

    screen_print(detected, domain)
    file_result(detected)


if __name__ == '__main__':
    main()
